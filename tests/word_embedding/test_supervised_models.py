import unittest
import fastText
from supervised_models.python.math_utils import cosine_sim, decode_float_list


class TestSupervisedModels(unittest.TestCase):
    def __init__(self, *args, **kwargs):
        super(TestSupervisedModels, self).__init__(*args, **kwargs)

        self.model = fastText.load_model("supervised_models/ons_supervised.bin")

    def test_cosine_sim(self):
        """
        Test the cosine similarity between two vectors
        :return:
        """
        u = self.model.get_sentence_vector("homicide")
        v = self.model.get_sentence_vector("murder")

        sim = cosine_sim(u, v)
        self.assertAlmostEqual(sim, 0.8, 1)

    def test_embedding_vector(self):
        """
        Define an embedding vector close to that of homicide and test cosine sim
        :return:
        """
        import numpy as np

        embedding_vector = "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"
        embedding_vector = np.array(decode_float_list(embedding_vector))

        homicide = self.model.get_sentence_vector("homicide")

        sim = cosine_sim(homicide, embedding_vector)

        self.assertAlmostEqual(sim, 0.9, 1)
